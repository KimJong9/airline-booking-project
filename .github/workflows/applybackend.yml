name: Apply Backend

on:
  workflow_dispatch:  # 수동으로 트리거


jobs:
  build-and-push:
    runs-on: ubuntu-latest
    env:
      AWS_REGION: ap-northeast-2
      ECR_REGISTRY: 241533155281.dkr.ecr.ap-northeast-2.amazonaws.com
      ECR_REPOSITORY: jaws/backend
      IMAGE_USER: airline-booking-project_user
      IMAGE_BOOKING: airline-booking-project_booking
      IMAGE_FLIGHT: airline-booking-project_flight
      TAG_USER: user
      TAG_BOOKING: booking
      TAG_FLIGHT: flight
      DOCKER_TAG: latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # AWS CLI를 설정하기 위한 인증
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2  # 원하는 리전으로 설정

      # ECR에 로그인
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Create .env file
        run: |
          for dir in backend/*/; do
            echo "ORIGIN_URL=${{ secrets.REACT_APP_PROD_ORIGIN }}" >> "$dir.env"
            echo "DB_HOST=${{ secrets.REACT_APP_PROD_DB }}" >> "$dir.env"
          done

      - name: Build Docker images with Docker Compose
        run: |
          # Update package lists
          sudo apt-get update
          # Install Docker Compose
          sudo apt-get install -y docker-compose
          # docker-compose build
          docker-compose build
          docker image ls

      - name: Tag and Push user image to ECR
        run: |
          docker tag ${{ env.IMAGE_USER }}:${{ env.DOCKER_TAG }} ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ env.TAG_USER }}
          docker push ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ env.TAG_USER }}

      - name: Tag and Push booking image to ECR
        run: |
          docker tag ${{ env.IMAGE_BOOKING }}:${{ env.DOCKER_TAG }} ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ env.TAG_BOOKING }}
          docker push ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ env.TAG_BOOKING }}

      - name: Tag and Push flight image to ECR
        run: |
          docker tag ${{ env.IMAGE_FLIGHT }}:${{ env.DOCKER_TAG }} ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ env.TAG_FLIGHT }}
          docker push ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ env.TAG_FLIGHT }}

  deploy_PROD:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      # 1. GitHub 저장소 체크아웃
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2. AWS 자격 증명 구성
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2  # EKS 클러스터가 있는 리전

      # 3. AWS EKS 클러스터에 연결 (kubeconfig 설정)
      - name: Update kubeconfig for EKS
        run: |
          aws eks update-kubeconfig --name jaws-prod-cluster --region ap-northeast-2

      # 4. kubectl을 사용하여 배포 재시작
      - name: Rollout restart deployment
        run: |
          kubectl rollout restart deployment -n default

      # 5. 배포 성공 시 Slack 알림 전송
      - name: Notify Slack on success
        if: success()
        run: |
          curl -X POST -H 'Content-type: application/json' \
          --data '{"text": "prod 클러스터에 배포가 완료 되었습니다."}' \
          ${{ secrets.SLACK_WEBHOOK_URL }}

      # 6. 배포 실패 시 Slack 알림 전송
      - name: Notify Slack on failure
        if: failure()
        run: |
          curl -X POST -H 'Content-type: application/json' \
          --data '{"text": "prod 클러스터에 배포가 실패했습니다. 로그를 확인하세요."}' \
          ${{ secrets.SLACK_WEBHOOK_URL }}

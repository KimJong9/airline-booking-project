name: Frontend Workflow
on:
  push:
    branches:
      - main
    paths:
      - 'frontend/**'
  workflow_dispatch:
    
env:
  NODE_OPTION: '--no-warnings'
  AWS_REGION: ap-northeast-2

jobs:
  build-frontend:
    runs-on: ubuntu-latest

    steps:
      # 1. 저장소 체크아웃
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2. Node.js 설치
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      # 3. 의존성 캐싱
      - name: Cache node modules
        uses: actions/cache@v3
        with:
          path: frontend/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      # 4. 의존성 설치
      - name: Install dependencies
        run: |
          cd frontend
          npm ci

      # 5. 빌드 실행
      - name: Build the frontend
        env:
          REACT_APP_BACKEND_URL: ${{ secrets.REACT_APP_BACKEND_URL }}
        run: |
          cd frontend
          npm run build

      # 6. 빌드 결과물 아티팩트 업로드
      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-output
          path: frontend/build

      # 7. 빌드 성공 시 Slack 알림 전송
      - name: Notify Slack on success
        if: success()
        uses: slackapi/slack-github-action@v1.23.0
        with:
          channel-id: ${{ secrets.SLACK_CHANNEL_ID }}  # 채널 이름이 아니라 ID여야 합니다.
          slack-message: "Build succeeded for test server! after test, Click to apply the frontend changes."
          bot-token: ${{ secrets.SLACK_BOT_TOKEN }}  # 여기에서 bot-token으로 수정
          actions: "Apply Changes"

      # 8. 빌드 실패 시 Slack 알림 전송
      - name: Notify Slack on failure
        if: failure()
        uses: slackapi/slack-github-action@v1.23.0
        with:
          channel-id: ${{ secrets.SLACK_CHANNEL_ID }}
          slack-message: "Build failed for test. Please check the logs."
          bot-token: ${{ secrets.SLACK_BOT_TOKEN }}

  upload-frontend:
    needs: build-frontend  # test-frontend가 성공적으로 완료되어야 실행
    runs-on: ubuntu-latest

    steps:
      # 1. 빌드된 결과물 다운로드
      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-output
          path: frontend/build

      # 2. AWS Configure
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      # 3. S3로 업로드
      - name: Upload to S3
        run: |
          aws s3 sync ./frontend/build s3://jaws-airline-frontend/ --delete

  cloudfront-cashing:
    needs: upload-frontend
    runs-on: ubuntu-latest
    steps:
      - name: Invalidate CloudFront cache
        run: |
          aws cloudfront create-invalidation --distribution-id EPBRC784R77G0 --paths "/*"
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ env.AWS_REGION }}